// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.14.0
// source: user.sql

package db

import (
	"context"
)

const createUser = `-- name: CreateUser :one
INSERT INTO users (
  username, public_address,nonce
) VALUES (
  $1, $2,$3
)
RETURNING id, nonce, public_address, username, created_at
`

type CreateUserParams struct {
	Username      string `json:"username"`
	PublicAddress string `json:"public_address"`
	Nonce         int64  `json:"nonce"`
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (User, error) {
	row := q.db.QueryRowContext(ctx, createUser, arg.Username, arg.PublicAddress, arg.Nonce)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Nonce,
		&i.PublicAddress,
		&i.Username,
		&i.CreatedAt,
	)
	return i, err
}

const findUserByAddress = `-- name: FindUserByAddress :one
SELECT id, nonce, public_address, username, created_at FROM users
WHERE public_address = $1 LIMIT 1
`

func (q *Queries) FindUserByAddress(ctx context.Context, publicAddress string) (User, error) {
	row := q.db.QueryRowContext(ctx, findUserByAddress, publicAddress)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Nonce,
		&i.PublicAddress,
		&i.Username,
		&i.CreatedAt,
	)
	return i, err
}

const findUserByPk = `-- name: FindUserByPk :one
SELECT id, nonce, public_address, username, created_at FROM users
WHERE id = $1 LIMIT 1
`

func (q *Queries) FindUserByPk(ctx context.Context, id int64) (User, error) {
	row := q.db.QueryRowContext(ctx, findUserByPk, id)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Nonce,
		&i.PublicAddress,
		&i.Username,
		&i.CreatedAt,
	)
	return i, err
}

const updateUserNonce = `-- name: UpdateUserNonce :one
UPDATE users 
SET nonce=$1
WHERE id=$2
RETURNING id, nonce, public_address, username, created_at
`

type UpdateUserNonceParams struct {
	Nonce int64 `json:"nonce"`
	ID    int64 `json:"id"`
}

func (q *Queries) UpdateUserNonce(ctx context.Context, arg UpdateUserNonceParams) (User, error) {
	row := q.db.QueryRowContext(ctx, updateUserNonce, arg.Nonce, arg.ID)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Nonce,
		&i.PublicAddress,
		&i.Username,
		&i.CreatedAt,
	)
	return i, err
}
