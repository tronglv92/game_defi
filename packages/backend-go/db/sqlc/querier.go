// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.14.0

package db

import (
	"context"
	"encoding/json"
)

type Querier interface {
	BlockWeapon(ctx context.Context, id int64) (Weapon, error)
	CreateTransactionWeapon(ctx context.Context, arg CreateTransactionWeaponParams) (TransactionWeapon, error)
	CreateUser(ctx context.Context, arg CreateUserParams) (User, error)
	CreateWeapon(ctx context.Context, arg CreateWeaponParams) (Weapon, error)
	CreateWeaponAbility(ctx context.Context, arg CreateWeaponAbilityParams) (WeaponAbility, error)
	CreateWeaponNFT(ctx context.Context, arg CreateWeaponNFTParams) (WeaponNft, error)
	CreateWeaponStat(ctx context.Context, arg CreateWeaponStatParams) (WeaponStat, error)
	DeleteAblitity(ctx context.Context, weaponID int64) error
	DeleteStat(ctx context.Context, weaponID int64) error
	FilterWeapon(ctx context.Context, arg FilterWeaponParams) ([]json.RawMessage, error)
	FindUserByAddress(ctx context.Context, publicAddress string) (User, error)
	FindUserByPk(ctx context.Context, id int64) (User, error)
	FindWeaponByOwnerAddress(ctx context.Context, arg FindWeaponByOwnerAddressParams) ([]json.RawMessage, error)
	// -- name: FindWeaponByPK :one
	// SELECT sqlc.embed(weapon_abilities.*),weapons.id FROM weapons
	// INNER JOIN weapon_abilities ON weapons.id=weapon_abilities.weapon_id
	// WHERE weapons.id = $1 AND weapons.state = $2 LIMIT 1;
	FindWeaponByPK(ctx context.Context, id int64) (json.RawMessage, error)
	UnBlockWeapon(ctx context.Context, id int64) (Weapon, error)
	UpdateAblitity(ctx context.Context, arg UpdateAblitityParams) (WeaponAbility, error)
	UpdateStat(ctx context.Context, arg UpdateStatParams) (WeaponStat, error)
	UpdateStateWeapon(ctx context.Context, arg UpdateStateWeaponParams) (Weapon, error)
	UpdateUserNonce(ctx context.Context, arg UpdateUserNonceParams) (User, error)
	UpdateWeapon(ctx context.Context, arg UpdateWeaponParams) (Weapon, error)
	UpdateWeaponNFT(ctx context.Context, arg UpdateWeaponNFTParams) (WeaponNft, error)
}

var _ Querier = (*Queries)(nil)
